<% content_for :title, "本を追加 - コーヒーと本と猫" %>

<div class="add-book-page">
    <div class="back-navigation">
        <%= link_to books_path, class: "back-button" do %>
        <span class="back-icon">←</span>
        戻る
        <% end %>
    </div>

    <div class="add-book-header">
        <h1 class="add-book-title">新しい本を追加</h1>
        <p class="add-book-subtitle">読み終わった本を記録しましょう</p>
    </div>

    <div class="search-books-section">
        <div class="search-books-card">
            <h2 class="search-books-title">
                <span class="search-icon">🔍</span>
                本を検索
            </h2>

            <div class="search-tips">
                <p class="tips-title">💡 検索のコツ:</p>
                <ul class="tips-list">
                    <li>「"ハリー・ポッター"」のように引用符で囲むと完全一致検索</li>
                    <li>「村上春樹 ノルウェイ」のように著者名と作品名を組み合わせる</li>
                    <li>「Ruby プログラミング」のようにジャンルとキーワードを組み合わせる</li>
                </ul>
            </div>

            <div class="search-form">
                <input type="text" id="search-input" placeholder="例: &quot;ハリー・ポッター&quot;、村上春樹、Ruby プログラミング" class="search-input">
                <button onclick="safeSearch(1)" class="search-button">
                    <span class="button-icon">🔍</span>
                    検索
                </button>
            </div>

            <div class="search-examples">
                <p class="examples-title">人気の検索例:</p>
                <div class="examples-buttons">
                    <button onclick="searchExample('&quot;ハリー・ポッター&quot;')" class="example-button">ハリー・ポッター</button>
                    <button onclick="searchExample('村上春樹')" class="example-button">村上春樹</button>
                    <button onclick="searchExample('&quot;鬼滅の刃&quot;')" class="example-button">鬼滅の刃</button>
                    <button onclick="searchExample('Python プログラミング')" class="example-button">Python入門</button>
                    <button onclick="searchExample('東野圭吾')" class="example-button">東野圭吾</button>
                </div>
            </div>

            <div class="search-results-container">
                <div id="search-results" class="search-results"></div>
                <div id="search-pagination" class="search-pagination"></div>
                <div id="pagination-info" class="pagination-info"></div>
            </div>
        </div>
    </div>

    <div class="manual-form-section">
        <div class="manual-form-card">
            <h2 class="manual-form-title">
                <span class="form-icon">✏️</span>
                手動で入力
            </h2>

            <%= form_with model: @book, local: true, class: "book-form" do |form| %>
            <% if @book.errors.any? %>
            <div class="error-card">
                <div class="error-header">
                    <span class="error-icon">🚫</span>
                    <span class="error-title">入力内容をご確認ください</span>
                </div>
                <ul class="error-list">
                    <% @book.errors.full_messages.each do |message| %>
                    <li class="error-item"><%= message %></li>
                    <% end %>
                </ul>
            </div>
            <% end %>

            <div class="form-group">
                <%= form.label :title, "タイトル", class: "form-label" %>
                <%= form.text_field :title, required: true, class: "form-input", placeholder: "本のタイトルを入力" %>
            </div>

            <div class="form-group">
                <%= form.label :author, "著者", class: "form-label" %>
                <%= form.text_field :author, class: "form-input", placeholder: "著者名を入力" %>
            </div>

            <div class="form-group">
                <%= form.label :publisher, "出版社", class: "form-label" %>
                <%= form.text_field :publisher, class: "form-input", placeholder: "出版社名を入力" %>
            </div>

            <div class="form-group">
                <%= form.label :cover_image_url, "表紙画像URL", class: "form-label" %>
                <%= form.url_field :cover_image_url, class: "form-input", placeholder: "https://..." %>
                <% if @book.cover_image_url.present? %>
                <div class="current-image">
                    <p class="current-image-label">現在の画像:</p>
                    <img src="<%= @book.cover_image_url %>" alt="<%= @book.title %>" class="current-image-preview">
                </div>
                <% end %>
            </div>

            <div class="form-group">
                <%= form.label :rating, "評価", class: "form-label" %>
                <%= form.select :rating, options_for_select([
                            ['未評価', nil],
                            ['★☆☆☆☆ (1)', 1],
                            ['★★☆☆☆ (2)', 2],
                            ['★★★☆☆ (3)', 3],
                            ['★★★★☆ (4)', 4],
                            ['★★★★★ (5)', 5]
                        ]), {}, { class: "form-select" } %>
            </div>

            <div class="form-group">
                <%= form.label :memo, "メモ・感想", class: "form-label" %>
                <%= form.text_area :memo, rows: 6, placeholder: "読んだ感想や印象に残った部分を記録しましょう...", class: "form-textarea" %>
            </div>

            <div class="form-actions">
                <%= form.submit "保存", class: "submit-button primary" %>
                <%= link_to "キャンセル", books_path, class: "submit-button secondary" %>
            </div>
            <% end %>
        </div>
    </div>
</div>

<script>
    (function() {
        'use strict';

        function initializeBookSearch() {
            window.BookSearch = {
                currentQuery: '',
                currentPage: 1,
                totalPages: 0,
                validPages: new Set(),
                isLoading: false,
                initialized: true,

                async search(page = 1) {
                    const query = document.getElementById('search-input').value.trim();
                    const resultsDiv = document.getElementById('search-results');
                    const paginationDiv = document.getElementById('search-pagination');
                    const paginationInfo = document.getElementById('pagination-info');

                    if (!query) {
                        resultsDiv.innerHTML = '<div class="search-empty"><div class="empty-icon">🔍</div><p>検索キーワードを入力してください</p></div>';
                        paginationDiv.style.display = 'none';
                        paginationInfo.style.display = 'none';
                        return;
                    }

                    if (this.isLoading) return;

                    if (this.currentQuery !== query) {
                        this.validPages.clear();
                        this.totalPages = 0;
                    }

                    this.isLoading = true;
                    this.currentQuery = query;
                    this.currentPage = page;

                    const startIndex = (page - 1) * 10;

                    resultsDiv.innerHTML = '<div class="search-loading"><div class="loading-spinner"></div><p>検索中...</p></div>';
                    paginationDiv.style.display = 'none';
                    paginationInfo.style.display = 'none';

                    try {
                        const response = await fetch(`/books/search_external?query=${encodeURIComponent(query)}&start_index=${startIndex}`);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();

                        if (data.error) {
                            throw new Error(data.error);
                        }

                        this.totalPages = Math.max(this.totalPages, data.pagination.total_pages);

                        if (data.items.length > 0) {
                            this.validPages.add(page);
                            this.displayResults(data.items);
                            this.displayPagination(data.pagination);
                            this.displayPaginationInfo(data.pagination);
                        } else {
                            if (page === 1) {
                                resultsDiv.innerHTML = '<div class="search-empty"><div class="empty-icon">📚</div><p>検索結果が見つかりませんでした</p></div>';
                                paginationDiv.style.display = 'none';
                                paginationInfo.style.display = 'none';
                            } else {
                                const lastValidPage = Math.max(...Array.from(this.validPages));
                                if (lastValidPage && lastValidPage < page) {
                                    this.search(lastValidPage);
                                    return;
                                } else {
                                    resultsDiv.innerHTML = '<div class="search-empty"><div class="empty-icon">📚</div><p>これ以上の結果はありません</p></div>';
                                    this.totalPages = Math.max(...Array.from(this.validPages));
                                    const correctedPagination = {
                                        ...data.pagination,
                                        total_pages: this.totalPages,
                                        current_page: page,
                                        has_next: false
                                    };
                                    this.displayPagination(correctedPagination);
                                    this.displayPaginationInfo(correctedPagination);
                                }
                            }
                        }

                    } catch (error) {
                        resultsDiv.innerHTML = `<div class="search-error"><div class="error-icon">⚠️</div><p>検索中にエラーが発生しました: ${error.message}</p></div>`;
                        paginationDiv.style.display = 'none';
                        paginationInfo.style.display = 'none';
                    } finally {
                        this.isLoading = false;
                    }
                },

                displayResults(books) {
                    const resultsDiv = document.getElementById('search-results');
                    if (books.length === 0) return;

                    let html = '';
                    const currentTime = Date.now();

                    books.forEach((book, index) => {
                        const hasValidImage = book.cover_image && book.cover_image !== '' && book.cover_image !== 'null';
                        const bookId = `book-${index}-${currentTime}`;

                        html += `
                            <div class="search-result-card" onclick="window.BookSearch.selectBook('${this.escapeHtml(book.title)}', '${this.escapeHtml(book.authors)}', '${this.escapeHtml(book.publisher)}', '${this.escapeHtml(book.cover_image || '')}')">
                                <div class="result-cover" id="cover-${bookId}">
                                    ${hasValidImage ? 
                                        `<div class="image-container">
                                            <img id="img-${bookId}"
                                                 src="${book.cover_image}" 
                                                 alt="${this.escapeHtml(book.title)}" 
                                                 class="result-image"
                                                 onload="window.BookSearch.handleImageLoad('${bookId}')"
                                                 onerror="window.BookSearch.handleImageError('${bookId}', '${this.escapeHtml(book.title)}')">
                                            <div id="fallback-${bookId}" class="result-fallback">
                                                <span class="fallback-icon">📖</span>
                                                <span class="fallback-text">画像なし</span>
                                            </div>
                                            <div id="loading-${bookId}" class="result-loading">
                                                <div class="loading-mini"></div>
                                                <span class="loading-text">読込中</span>
                                            </div>
                                        </div>` : 
                                        `<div class="result-placeholder">
                                            <span class="placeholder-icon">📖</span>
                                            <span class="placeholder-text">画像なし</span>
                                        </div>`
                                    }
                                </div>
                                <div class="result-info">
                                    <h3 class="result-title">${this.escapeHtml(book.title)}</h3>
                                    <p class="result-author">著者: ${this.escapeHtml(book.authors)}</p>
                                    <p class="result-publisher">出版社: ${this.escapeHtml(book.publisher)}</p>
                                </div>
                            </div>
                        `;
                    });

                    resultsDiv.innerHTML = html;
                    this.manageImageLoading(books, currentTime);
                },

                displayPagination(pagination) {
                    const paginationDiv = document.getElementById('search-pagination');
                    const currentPage = pagination.current_page;
                    const maxValidPage = this.validPages.size > 0 ? Math.max(...Array.from(this.validPages)) : 1;
                    const displayTotalPages = Math.max(maxValidPage, this.totalPages);

                    if (displayTotalPages <= 1) {
                        paginationDiv.style.display = 'none';
                        return;
                    }

                    let html = '';

                    if (pagination.has_prev && currentPage > 1) {
                        html += `<button class="pagination-button prev" onclick="safeSearch(${currentPage - 1})">前へ</button>`;
                    } else {
                        html += `<button class="pagination-button prev disabled">前へ</button>`;
                    }

                    let startPage, endPage;
                    if (displayTotalPages <= 10) {
                        startPage = 1;
                        endPage = displayTotalPages;
                    } else {
                        if (currentPage <= 5) {
                            startPage = 1;
                            endPage = 8;
                        } else if (currentPage >= displayTotalPages - 4) {
                            startPage = displayTotalPages - 7;
                            endPage = displayTotalPages;
                        } else {
                            startPage = currentPage - 3;
                            endPage = currentPage + 4;
                        }
                    }

                    if (startPage > 1) {
                        html += `<button class="pagination-button" onclick="safeSearch(1)">1</button>`;
                        if (startPage > 2) {
                            html += `<span class="pagination-ellipsis">...</span>`;
                        }
                    }

                    for (let i = startPage; i <= endPage; i++) {
                        if (i === currentPage) {
                            html += `<button class="pagination-button active">${i}</button>`;
                        } else if (i <= maxValidPage) {
                            html += `<button class="pagination-button" onclick="safeSearch(${i})">${i}</button>`;
                        } else if (i === maxValidPage + 1 && pagination.has_next) {
                            html += `<button class="pagination-button" onclick="safeSearch(${i})">${i}</button>`;
                        }
                    }

                    if (endPage < displayTotalPages && displayTotalPages <= maxValidPage + 1) {
                        if (endPage < displayTotalPages - 1) {
                            html += `<span class="pagination-ellipsis">...</span>`;
                        }
                        html += `<button class="pagination-button" onclick="safeSearch(${displayTotalPages})">${displayTotalPages}</button>`;
                    }

                    if (pagination.has_next || currentPage < maxValidPage + 1) {
                        html += `<button class="pagination-button next" onclick="safeSearch(${currentPage + 1})">次へ</button>`;
                    } else {
                        html += `<button class="pagination-button next disabled">次へ</button>`;
                    }

                    paginationDiv.innerHTML = html;
                    paginationDiv.style.display = 'flex';
                },

                displayPaginationInfo(pagination) {
                    const paginationInfo = document.getElementById('pagination-info');

                    if (pagination.total_items === 0) {
                        paginationInfo.style.display = 'none';
                        return;
                    }

                    const startItem = pagination.start_index + 1;
                    const endItem = Math.min(pagination.start_index + 10, pagination.total_items);
                    const maxValidPage = this.validPages.size > 0 ? Math.max(...Array.from(this.validPages)) : 1;

                    let infoText = `${startItem}〜${endItem}件 / 全${pagination.total_items}件 (${pagination.current_page}/${maxValidPage}+ページ)`;

                    if (pagination.total_items >= 1000) {
                        infoText += ` ※最大1000件まで表示`;
                    }

                    paginationInfo.innerHTML = infoText;
                    paginationInfo.style.display = 'block';
                },

                manageImageLoading(books, currentTime) {
                    books.forEach((book, index) => {
                        if (book.cover_image && book.cover_image !== '') {
                            const bookId = `book-${index}-${currentTime}`;

                            setTimeout(() => {
                                const img = document.getElementById(`img-${bookId}`);
                                const loading = document.getElementById(`loading-${bookId}`);

                                if (img && !img.complete) {
                                    this.handleImageError(bookId, book.title);
                                } else if (loading && loading.style.display !== 'none') {
                                    this.handleImageError(bookId, book.title);
                                }
                            }, 2000);
                        }
                    });
                },

                handleImageLoad(bookId) {
                    const loading = document.getElementById(`loading-${bookId}`);
                    if (loading) {
                        loading.style.display = 'none';
                    }
                },

                handleImageError(bookId, bookTitle) {
                    const img = document.getElementById(`img-${bookId}`);
                    const fallback = document.getElementById(`fallback-${bookId}`);
                    const loading = document.getElementById(`loading-${bookId}`);

                    if (img) img.style.display = 'none';
                    if (loading) loading.style.display = 'none';
                    if (fallback) fallback.style.display = 'flex';
                },

                selectBook(title, authors, publisher, coverImage) {
                    document.getElementById('book_title').value = title;
                    document.getElementById('book_author').value = authors;
                    document.getElementById('book_publisher').value = publisher;
                    document.getElementById('book_cover_image_url').value = coverImage;

                    document.getElementById('book_title').scrollIntoView({
                        behavior: 'smooth'
                    });

                    const selectedMessage = document.createElement('div');
                    selectedMessage.innerHTML = '✅ 本が選択されました';
                    selectedMessage.className = 'selection-message';
                    document.body.appendChild(selectedMessage);

                    setTimeout(() => {
                        selectedMessage.remove();
                    }, 3000);
                },

                escapeHtml(text) {
                    if (!text) return '';
                    const div = document.createElement('div');
                    div.textContent = text;
                    return div.innerHTML;
                }
            };
        }

        window.safeSearch = function(page = 1) {
            if (window.BookSearch && window.BookSearch.initialized) {
                window.BookSearch.search(page);
            } else {
                setTimeout(() => {
                    if (window.BookSearch && window.BookSearch.initialized) {
                        window.BookSearch.search(page);
                    }
                }, 100);
            }
        };

        window.searchExample = function(exampleQuery) {
            const searchInput = document.getElementById('search-input');
            searchInput.value = exampleQuery;
            safeSearch(1);
        };

        function initialize() {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initializeBookSearch);
            } else {
                initializeBookSearch();
            }
        }

        function setupEventListeners() {
            const searchInput = document.getElementById('search-input');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        safeSearch(1);
                    }
                });

                searchInput.addEventListener('input', function(e) {
                    if (e.target.value.trim() === '') {
                        const resultsDiv = document.getElementById('search-results');
                        const paginationDiv = document.getElementById('search-pagination');
                        const paginationInfo = document.getElementById('pagination-info');

                        if (resultsDiv) resultsDiv.innerHTML = '';
                        if (paginationDiv) paginationDiv.style.display = 'none';
                        if (paginationInfo) paginationInfo.style.display = 'none';
                    }
                });
            } else {
                setTimeout(setupEventListeners, 100);
            }
        }

        initialize();
        setupEventListeners();

    })();
</script>